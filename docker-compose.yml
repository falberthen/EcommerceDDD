services:
  postgres:
    image: postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@55w0rd
    command: >
      postgres -c wal_level=logical -c max_wal_senders=5 -c max_replication_slots=5
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ecommercedddnet
    volumes:
      - postgres:/var/lib/postgresql/data
      - './scripts/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql'
    restart: 
      on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - ecommercedddnet
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: 
      on-failure

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ecommercedddnet
    ports:
      - '29092:29092'
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    restart: 
      on-failure
    depends_on:      
      zookeeper:
        condition: service_started   
  
  init-kafka:
    image: confluentinc/cp-kafka:latest  
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - ecommercedddnet
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    command: >
      /bin/sh -c "sleep 10 &&
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Orders --replication-factor 1 --partitions 1 &&
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Payments --replication-factor 1 --partitions 1 &&
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Shipments --replication-factor 1 --partitions 1"
    restart: 
      on-failure
    depends_on:      
      kafka:
        condition: service_started

  kafka_topics_ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    networks:
      - ecommercedddnet
    restart: 
      on-failure
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_started

  connect:
    image: debezium/connect:2.5
    container_name: connect
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: 'kafka:9092'
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: CONNECT_CONFIGS
      OFFSET_STORAGE_TOPIC: CONNECT_OFFSETS
      STATUS_STORAGE_TOPIC: CONNECT_STATUSES    
    networks:
      - ecommercedddnet
    restart: 
      on-failure
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started      

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL:-pgadmintest@pgadmin.org}'
      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD:-@dm1n}'
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - 'pgadmin:/var/lib/pgadmin'
    ports:
      - '$PGADMIN_PORT:80'
    networks:
      - ecommercedddnet
    restart: 
      on-failure
    depends_on:
      postgres:
        condition: service_started

  ecommerceddd-identityserver:
    image: ecommerceddd-identityserver
    container_name: ecommerceddd-identityserver
    build:
      context: .
      dockerfile: src/Crosscutting/EcommerceDDD.IdentityServer/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:      
      test: curl --fail http://ecommerceddd-identityserver:80/health || exit 1      
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s
      start_interval: 30s
    ports:
      - '5001:80'
    networks:
      - ecommercedddnet
    restart: 
      always
    depends_on:
      postgres:
        condition: 
            service_healthy

  ecommerceddd-apigateway:
    image: ecommerceddd-apigateway
    container_name: ecommerceddd-apigateway
    build:
      context: .
      dockerfile: src/Crosscutting/EcommerceDDD.ApiGateway/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:
      test: curl --fail http://ecommerceddd-apigateway:80/health || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s
      start_interval: 5s
    ports:
      - '5000:80'
    networks:
      - ecommercedddnet    
    restart:
      always
    depends_on:      
      ecommerceddd-identityserver:
        condition: service_started
      ecommerceddd-products:
        condition: service_started
      ecommerceddd-inventory:
        condition: service_started
      ecommerceddd-customers:
        condition: service_started
      ecommerceddd-orders:
        condition: service_started
      ecommerceddd-payments:
        condition: service_started
      ecommerceddd-shipments:
        condition: service_started

  # Services
  ecommerceddd-customers:
    image: ecommerceddd-customers
    container_name: ecommerceddd-customers
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.CustomerManagement/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'   
    healthcheck:      
      test: curl --fail http://ecommerceddd-customers:80/health || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
      start_interval: 5s
    ports:
      - '8001:80'    
    networks:
      - ecommercedddnet
    restart:
      on-failure
    depends_on:
      postgres:
        condition: service_healthy
      ecommerceddd-identityserver:
        condition: service_started      

  ecommerceddd-products:
    image: ecommerceddd-products
    container_name: ecommerceddd-products
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.ProductCatalog/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:
      test: curl --fail http://ecommerceddd-products:80/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s    
      start_interval: 5s
    ports:
      - '8002:80'
    networks:
      - ecommercedddnet
    restart:
      on-failure
    depends_on:      
      postgres:
        condition: service_healthy
      ecommerceddd-identityserver:
        condition: service_started      

  ecommerceddd-inventory:
    image: ecommerceddd-inventory
    container_name: ecommerceddd-inventory
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.InventoryManagement/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'
    ports:
      - '8003:80'    
    healthcheck:      
      test: curl --fail http://ecommerceddd-inventory:80/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - ecommercedddnet
    restart:
      on-failure
    depends_on:
      postgres:
        condition: service_healthy      
      ecommerceddd-products:
        condition: service_started
      ecommerceddd-identityserver:
        condition: service_started
      
  ecommerceddd-quotes:
    image: ecommerceddd-quotes
    container_name: ecommerceddd-quotes
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.QuoteManagement/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:      
      test: curl --fail http://ecommerceddd-quotes:80/health || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
      start_interval: 5s
    ports:
      - '8004:80'
    networks:
      - ecommercedddnet    
    restart: 
      on-failure
    depends_on:
      postgres:
        condition: service_healthy      
      ecommerceddd-products:
        condition: service_started
      ecommerceddd-identityserver:
        condition: service_started

  ecommerceddd-orders:
    image: ecommerceddd-orders
    container_name: ecommerceddd-orders
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.OrderProcessing/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:      
      test: curl --fail http://ecommerceddd-orders:80/health || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
      start_interval: 5s
    ports:
      - '8005:80'
    networks:
      - ecommercedddnet    
    restart:
      on-failure
    depends_on:
      postgres:
        condition: service_healthy      
      kafka:
        condition: service_healthy
      ecommerceddd-products:
        condition: service_started
      connect:
        condition: service_started
      ecommerceddd-identityserver:
        condition: service_started        

  ecommerceddd-payments:
    image: ecommerceddd-payments
    container_name: ecommerceddd-payments
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.PaymentProcessing/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:      
      test: curl --fail http://ecommerceddd-payments:80/health || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
      start_interval: 5s
    ports:
      - '8006:80'
    networks:
      - ecommercedddnet    
    restart:
      on-failure
    depends_on:
      postgres:
        condition: service_healthy      
      kafka:
        condition: service_healthy
      ecommerceddd-products:
        condition: service_started
      connect:
        condition: service_started
      ecommerceddd-identityserver:
        condition: service_started         

  ecommerceddd-shipments:
    image: ecommerceddd-shipments
    container_name: ecommerceddd-shipments
    build:
      context: .
      dockerfile: src/Services/EcommerceDDD.ShipmentProcessing/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'    
    healthcheck:      
      test: curl --fail http://ecommerceddd-shipments:80/health || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
      start_interval: 5s
    ports:
      - '8007:80'
    networks:
      - ecommercedddnet    
    restart:
      on-failure
    depends_on:
      postgres:
        condition: service_healthy      
      kafka:
        condition: service_healthy
      ecommerceddd-products:
        condition: service_started
      connect:
        condition: service_started
      ecommerceddd-identityserver:
        condition: service_started      

networks:
  ecommercedddnet:
    driver: bridge

volumes:
  postgres:
  pgadmin:
