/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createProblemDetailsFromDiscriminatorValue, type ProblemDetails } from '../../../../models/index';
// @ts-ignore
import { ConfirmRequestBuilderRequestsMetadata, type ConfirmRequestBuilder } from './confirm/index';
// @ts-ignore
import { DetailsRequestBuilderRequestsMetadata, type DetailsRequestBuilder } from './details/index';
// @ts-ignore
import { HistoryRequestBuilderRequestsMetadata, type HistoryRequestBuilder } from './history/index';
// @ts-ignore
import { ItemsRequestBuilderNavigationMetadata, ItemsRequestBuilderRequestsMetadata, type ItemsRequestBuilder } from './items/index';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/v2/quotes/{quoteId}
 */
export interface WithQuoteItemRequestBuilder extends BaseRequestBuilder<WithQuoteItemRequestBuilder> {
    /**
     * The confirm property
     */
    get confirm(): ConfirmRequestBuilder;
    /**
     * The details property
     */
    get details(): DetailsRequestBuilder;
    /**
     * The history property
     */
    get history(): HistoryRequestBuilder;
    /**
     * The items property
     */
    get items(): ItemsRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<string>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<string | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithQuoteItemRequestBuilderUriTemplate = "{+baseurl}/api/v2/quotes/{quoteId}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithQuoteItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithQuoteItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    confirm: {
        requestsMetadata: ConfirmRequestBuilderRequestsMetadata,
    },
    details: {
        requestsMetadata: DetailsRequestBuilderRequestsMetadata,
    },
    history: {
        requestsMetadata: HistoryRequestBuilderRequestsMetadata,
    },
    items: {
        requestsMetadata: ItemsRequestBuilderRequestsMetadata,
        navigationMetadata: ItemsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithQuoteItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithQuoteItemRequestBuilderUriTemplate,
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "string",
    },
};
/* tslint:enable */
/* eslint-enable */
