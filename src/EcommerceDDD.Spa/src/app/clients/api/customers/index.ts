/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createProblemDetailsFromDiscriminatorValue, serializeRegisterCustomerRequest, type ProblemDetails, type RegisterCustomerRequest } from '../../models/index';
// @ts-ignore
import { DetailsRequestBuilderRequestsMetadata, type DetailsRequestBuilder } from './details/index';
// @ts-ignore
import { HistoryRequestBuilderRequestsMetadata, type HistoryRequestBuilder } from './history/index';
// @ts-ignore
import { type WithCustomerItemRequestBuilder, WithCustomerItemRequestBuilderNavigationMetadata } from './item/index';
// @ts-ignore
import { type UpdateRequestBuilder, UpdateRequestBuilderRequestsMetadata } from './update/index';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/customers
 */
export interface CustomersRequestBuilder extends BaseRequestBuilder<CustomersRequestBuilder> {
    /**
     * The details property
     */
    get details(): DetailsRequestBuilder;
    /**
     * The history property
     */
    get history(): HistoryRequestBuilder;
    /**
     * The update property
     */
    get update(): UpdateRequestBuilder;
    /**
     * Gets an item from the ApiSdk.api.customers.item collection
     * @param customerId Unique identifier of the item
     * @returns {WithCustomerItemRequestBuilder}
     */
     byCustomerId(customerId: Guid) : WithCustomerItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<string>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     post(body: RegisterCustomerRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<string | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RegisterCustomerRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const CustomersRequestBuilderUriTemplate = "{+baseurl}/api/customers";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomersRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCustomerId: {
        navigationMetadata: WithCustomerItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["customerId"],
    },
    details: {
        requestsMetadata: DetailsRequestBuilderRequestsMetadata,
    },
    history: {
        requestsMetadata: HistoryRequestBuilderRequestsMetadata,
    },
    update: {
        requestsMetadata: UpdateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomersRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CustomersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "string",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRegisterCustomerRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
