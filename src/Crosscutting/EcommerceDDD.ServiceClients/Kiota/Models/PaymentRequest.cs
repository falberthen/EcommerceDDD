// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace EcommerceDDD.ServiceClients.ApiGateway.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PaymentRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The currencyCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>The customerId property</summary>
        public Guid? CustomerId { get; set; }
        /// <summary>The orderId property</summary>
        public Guid? OrderId { get; set; }
        /// <summary>The totalAmount property</summary>
        public double? TotalAmount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::EcommerceDDD.ServiceClients.ApiGateway.Models.PaymentRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::EcommerceDDD.ServiceClients.ApiGateway.Models.PaymentRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::EcommerceDDD.ServiceClients.ApiGateway.Models.PaymentRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currencyCode", n => { CurrencyCode = n.GetStringValue(); } },
                { "customerId", n => { CustomerId = n.GetGuidValue(); } },
                { "orderId", n => { OrderId = n.GetGuidValue(); } },
                { "totalAmount", n => { TotalAmount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("currencyCode", CurrencyCode);
            writer.WriteGuidValue("customerId", CustomerId);
            writer.WriteGuidValue("orderId", OrderId);
            writer.WriteDoubleValue("totalAmount", TotalAmount);
        }
    }
}
#pragma warning restore CS0618
